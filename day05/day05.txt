一.作用域
  因为控制器是跟html元素标签相关联的，而HTML元素标签又有各自的作用范围，这就导致了控制器有各自的作用范围，最终导致$scope也有不同的作用范围
  1.根作用域：
    $rootScope,跟app绑定的，作用范围是整个app的范围
  2.子作用域:
    $scope，跟控制器绑定，作用范围就是控制器的范围
二.过滤器
  angularJs使用过滤器(filter)来对数据进行格式化展示
  在表达式{{}}中添加 管道符号 |
  过滤器还可以在指令中使用
  如果需要传参，则在过滤器后面添加：在冒号后面添加参数
  1.内置过滤器：
    1)uppercase
    2)lowercase
    3)date
    4)currency
    5)json 将传入的对象一json格式展示
    6)filter 从数组中选择子集
    7)limitTo 限制数组或者字符串的长度，如果参数是正数，表示从头开始截取，如果参数是负数，则从后面开始截取
    8)number 给数字添加千位分隔符,如果没有参数，默认四舍五入保留3位有效小数
              参数为整数时，保留小数点后为m位
              参数为负数时，保留小数点前为m位
    9)orderBy 给指定的数组排序
        不传参数，默认排序，为升序
        对象数组排序需要传递参数
        参数为字符串时，按照对象中该字符串的属性进行排序
        参数为数组时，按照多个指定属性进行排序，第一个相同，就排第二个...
        降序排序：
            需要添加第二个参数 true(默认是false，升序)
        还可以使用+ - 进行排序
        +：升序
        - 降序
    练习：
      1.在文本框输入数据，文本框下方显示2行
      一行大写
      一行小写
      2.过滤字符床"sfhasjhsij",截取后5位
  2.自定义过滤器
      使用应用模块调用filter方法
          该方法有两个参数
          第一参数：字符串
          第二个参数：function，表示该过滤器的功能或者是作用
三.依赖注入
    angularJs采用的是模块化的组织方式，将通用代码封装成一个对象或者方法或者函数，用于提高代码的复用性，这样就出现了使用者和被使用者的关系，即依赖关系
    而依赖注入，在运行期间，自动查找依赖关系，将查找到的依赖传递给使用者的一种机制
    常用的依赖注入有3种方式
        1.行内注入
            将多个依赖的对象写在数组中，程序会自动根据依赖的名称查找对应的模块对象，如果名称写错，会导致查找失败(注入错误)，最后一个元素function的参数，建议使用依赖的名称，且顺序与其保持一致
        2.推断式注入
            使用时，不声明依赖对象，而是将依赖对象，直接作为参数传递给function,在程序运行时，程序会自动根据依赖的名称查找对应的模块对象
            所以使用推断式，参数必须写正确
            代码上线时，经过压缩后，也会导致依赖，找不到，建议行内注入
        3.inject注入
 作业：自定义过滤器
 输入数据，格式化-链链接的形式
 输入字符串，下方同时显示大小写翻转的字符串
 a  ab
 A  AB        